name: CD Workflow

on:
  repository_dispatch:
    types:
      - deploy-new-version

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      # Set up kubectl
      - name: Set up kubectl
        run: gcloud container clusters get-credentials flask-cluster --zone us-central1-a --project ${{ secrets.GCP_PROJECT_ID }}

      # Sanitize version from client-payload (replace non-alphanumeric chars with '-')
      - name: Sanitize version for Kubernetes labels
        id: sanitize_version
        run: |
          version="${{ github.event.client_payload.version }}"
          sanitized_version=$(echo "$version" | tr -c '[:alnum:]' '-')
          echo "SANITIZED_VERSION=$sanitized_version" >> $GITHUB_ENV
          echo "Sanitized version: $sanitized_version"

      # Deploy to Green Deployment
      - name: Deploy New Version (Green)
        run: |
          kubectl apply -f k8s/flask-deployment-green.yaml
          kubectl set image deployment/flask-deployment-green flask-app=${{ github.event.client_payload.image }}
          kubectl rollout status deployment/flask-deployment-green

      - name: Get Green Deployment Info
        run: |
          GREEN_DEPLOYMENT_SERVICE_IP=$(kubectl get service flask-service -o jsonpath='{.spec.clusterIP}')
          GREEN_DEPLOYMENT_SERVICE_PORT=$(kubectl get service flask-service -o jsonpath='{.spec.ports[0].port}')
          echo "GREEN_DEPLOYMENT_IP=$GREEN_DEPLOYMENT_SERVICE_IP" >> $GITHUB_ENV
          echo "GREEN_DEPLOYMENT_SERVICE_PORT=$GREEN_DEPLOYMENT_SERVICE_PORT" >> $GITHUB_ENV

      - name: Trigger Status Check
        run: |
          curl -X GET http://$GREEN_DEPLOYMENT_SERVICE_IP:$GREEN_DEPLOYMENT_SERVICE_PORT/status -s | jq .status

      - name: Check Status Response
        run: |
          for i in {1..5}; do
            URL="http://$GREEN_DEPLOYMENT_SERVICE_IP:$GREEN_DEPLOYMENT_SERVICE_PORT/status"
            echo "Checking status: $URL"
            STATUS_RESPONSE=$(curl -X GET "$URL" -s)
            
            # Use jq to parse the JSON response and extract the "status" field
            STATUS=$(echo "$STATUS_RESPONSE" | jq -r .status)

            if [[ "$STATUS" == "running" ]]; then
              echo "Status check successful."
              break
            else
              echo "Status check failed. Expected 'running' status, got '$STATUS'. Retrying in $((2**i)) seconds..."
              sleep $((2**i))
            fi
          done
          if [[ "$STATUS" != "running" ]]; then
            echo "Status check failed after 5 retries. Exiting the job."
            exit 1
          fi
      

      # Switch Traffic to Green
      - name: Switch Traffic to Green
        run: |
          kubectl patch svc flask-service -p "{\"spec\":{\"selector\":{\"app\":\"flask-app-${{ env.SANITIZED_VERSION }}\"}}}"

      # Optionally, scale down Blue (after verification)
      - name: Scale Down Blue Deployment 
        run: |
          kubectl scale deployment/flask-deployment-blue --replicas=0

      # Promote Green to Blue (Optional)
      - name: Promote Blue to Green
        run: |
          kubectl set image deployment/flask-deployment-blue flask-app=${{ github.event.client_payload.image }}
          kubectl rollout status deployment/flask-deployment-blue

      # Update Kubernetes resource definitions in the GitHub repository
      - name: Update K8S Resource Definitions
        run: |
          # Update the resource definitions with the sanitized version tag
          sed -i 's|image: anhaid/flask-app:.*|image: anhaid/flask-app:${{ github.event.client_payload.image }}|' k8s/flask-deployment-green.yaml
          sed -i 's|image: anhaid/flask-app:.*|image: anhaid/flask-app:${{ github.event.client_payload.image }}|' k8s/flask-deployment-blue.yaml
          
          # Commit and push the changes to GitHub
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add k8s/flask-deployment-green.yaml k8s/flask-deployment-blue.yaml
          git commit -m "Update Kubernetes resources with new image"
          git push origin main